export EDITOR="emacs"

eval "$(fnm env --use-on-cd)"

alias c="clear"
alias h="history"
alias r="source ~/.zshrc"

alias grep="grep --color=auto"

alias pid="ps -A -e -l | grep"

alias .="cd && ls"
alias ..="cd .. && ls"
alias ...="cd ../.. && ls"
alias ,="cd"
alias ,,="cd .."
alias ,,,="cd"

alias ls="eza"
alias l="ls -lbF"
alias ll="ls -la"
alias llm="ll --sort=modified"
alias la="ls -lbhHigUmuSa"
alias lx="ls -lbhHigUmuSa@"
alias tree="eza --tree"
alias lS="eza -1"

alias vi="neovide"
alias vim="neovide"
alias svi="sudo vi"

alias top="btm"
alias cat="bat"

alias dev="cd ~/Development"
alias personal="cd ~/Development/Personal/"
alias business="cd ~/Development/Work/"
alias frs="PL_KANGA=http://localhost:8040 PL_WORKPLACE=http://localhost:8000 PL_LOGIN=http://localhost:9000 PL_PLATFORM=http://localhost:8020 PL_USERNAME=dev PL_PASSWORD=dev123 ./foundry.py run"

alias -s org=emacs

alias mkdir="mkdir -pv"

alias wget="wget -c"

# osx_netstat : Netstat on OSX
alias osx_netstat="sudo lsof -i -P"

# get local ip
lip() { ipconfig getifaddr en0 }

# mkdir and cd into it
mcd() { mkdir -p $1; cd $1; }

# share dirs on localnetwork
servepy() { python3 -m http.server $1 }

# fetch local weather by city or zip
weather() { curl "wttr.in/"$1"?u"; }

# http_headers (uses httpie)
http_headers() { http $@ -h; }
https_headers() { https $@ -h; }

# history_tops: Show Top 10 used command
history_top() { history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head; }


# extract : Extract an archive
function extract()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# zipf: to create a ZIP archive of a file or folder excluding dot files
zipf () {
    if [[ $# -eq 0 ]]; then echo "No files to ZIP."; return; fi
    if [[ $# -eq 1 ]]; then
            zipname=$(echo $1 | perl -pi -E "s/(\ |\/)+/-/g" | perl -pi -E "s/-$//g");
            if [[ -f "$zipname"".zip" ]]; then
                ask "Filename \\033[1;31m$zipname.zip already exists\\0033[0;39m, add elements to it ?" N
                [ "$rep" != "y" ] && zipname="$zipname""_"$(date +"%s")
            fi
    else
            zipname="Untitled_$(date +"%d_%h_%Hh%M")"
    fi

    echo -e "Compressing files to archive \\033[1;32m$zipname.zip\\0033[0;39m (skip hidden dot files)."
    zip -r "$zipname".zip "$@" -x "*/\.*" ;
}
